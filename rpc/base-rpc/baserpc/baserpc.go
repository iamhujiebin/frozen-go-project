// Code generated by goctl. DO NOT EDIT!
// Source: base_rpc.proto

//go:generate mockgen -destination ./baserpc_mock.go -package baserpc -source $GOFILE

package baserpc

import (
	"context"

	base_rpc "frozen-go-project/rpc/base-rpc/pb"

	"github.com/tal-tech/go-zero/core/jsonx"
	"github.com/tal-tech/go-zero/zrpc"
)

type (
	BaseRpc interface {
		GetPkgConfig(ctx context.Context, in *GetPkgConfigReq) (*GetPkgConfigResp, error)
		GetPkgSectionConfig(ctx context.Context, in *GetPkgSectionConfigReq) (*GetPkgSectionConfigResp, error)
		GetSystemConfigs(ctx context.Context, in *GetSystemConfigReq) (*GetSystemConfigRes, error)
	}

	defaultBaseRpc struct {
		cli zrpc.Client
	}
)

func NewBaseRpc(cli zrpc.Client) BaseRpc {
	return &defaultBaseRpc{
		cli: cli,
	}
}

func (m *defaultBaseRpc) GetPkgConfig(ctx context.Context, in *GetPkgConfigReq) (*GetPkgConfigResp, error) {
	var request base_rpc.GetPkgConfigReq
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := base_rpc.NewBaseRpcClient(m.cli.Conn())
	resp, err := client.GetPkgConfig(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret GetPkgConfigResp
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultBaseRpc) GetPkgSectionConfig(ctx context.Context, in *GetPkgSectionConfigReq) (*GetPkgSectionConfigResp, error) {
	var request base_rpc.GetPkgSectionConfigReq
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := base_rpc.NewBaseRpcClient(m.cli.Conn())
	resp, err := client.GetPkgSectionConfig(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret GetPkgSectionConfigResp
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultBaseRpc) GetSystemConfigs(ctx context.Context, in *GetSystemConfigReq) (*GetSystemConfigRes, error) {
	var request base_rpc.GetSystemConfigReq
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := base_rpc.NewBaseRpcClient(m.cli.Conn())
	resp, err := client.GetSystemConfigs(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret GetSystemConfigRes
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}
