// Code generated by goctl. DO NOT EDIT!
// Source: user_rpc.proto

package server

import (
	"context"

	"frozen-go-project/rpc/user-rpc/internal/logic"
	"frozen-go-project/rpc/user-rpc/internal/svc"
	user_rpc "frozen-go-project/rpc/user-rpc/pb"
)

type UserRpcServer struct {
	svcCtx *svc.ServiceContext
}

func NewUserRpcServer(svcCtx *svc.ServiceContext) *UserRpcServer {
	return &UserRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *UserRpcServer) GetUser(ctx context.Context, in *user_rpc.GetUserReq) (*user_rpc.GetUserRes, error) {
	l := logic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

func (s *UserRpcServer) AddUser(ctx context.Context, in *user_rpc.AddUserReq) (*user_rpc.AddUserRes, error) {
	l := logic.NewAddUserLogic(ctx, s.svcCtx)
	return l.AddUser(in)
}

func (s *UserRpcServer) GuestInit(ctx context.Context, in *user_rpc.GuestInitReq) (*user_rpc.GuestInitRes, error) {
	l := logic.NewGuestInitLogic(ctx, s.svcCtx)
	return l.GuestInit(in)
}

func (s *UserRpcServer) GuestLogin(ctx context.Context, in *user_rpc.GuestLoginReq) (*user_rpc.GuestLoginRes, error) {
	l := logic.NewGuestLoginLogic(ctx, s.svcCtx)
	return l.GuestLogin(in)
}

func (s *UserRpcServer) PageAnchorRecommend(ctx context.Context, in *user_rpc.PageAnchorRecommendReq) (*user_rpc.PageAnchorRecommendRes, error) {
	l := logic.NewPageAnchorRecommendLogic(ctx, s.svcCtx)
	return l.PageAnchorRecommend(in)
}

func (s *UserRpcServer) AddActionPoint(ctx context.Context, in *user_rpc.AddActionPointReq) (*user_rpc.AddActionPointRes, error) {
	l := logic.NewAddActionPointLogic(ctx, s.svcCtx)
	return l.AddActionPoint(in)
}

func (s *UserRpcServer) CheckAccessToken(ctx context.Context, in *user_rpc.CheckAccessTokenReq) (*user_rpc.CheckAccessTokenRes, error) {
	l := logic.NewCheckAccessTokenLogic(ctx, s.svcCtx)
	return l.CheckAccessToken(in)
}
