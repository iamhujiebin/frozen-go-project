// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test_rpc.proto

package test_rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestReq) Reset()         { *m = TestReq{} }
func (m *TestReq) String() string { return proto.CompactTextString(m) }
func (*TestReq) ProtoMessage()    {}
func (*TestReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f2f84cc4a19190, []int{0}
}

func (m *TestReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestReq.Unmarshal(m, b)
}
func (m *TestReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestReq.Marshal(b, m, deterministic)
}
func (m *TestReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestReq.Merge(m, src)
}
func (m *TestReq) XXX_Size() int {
	return xxx_messageInfo_TestReq.Size(m)
}
func (m *TestReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TestReq.DiscardUnknown(m)
}

var xxx_messageInfo_TestReq proto.InternalMessageInfo

type TestRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRes) Reset()         { *m = TestRes{} }
func (m *TestRes) String() string { return proto.CompactTextString(m) }
func (*TestRes) ProtoMessage()    {}
func (*TestRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f2f84cc4a19190, []int{1}
}

func (m *TestRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRes.Unmarshal(m, b)
}
func (m *TestRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRes.Marshal(b, m, deterministic)
}
func (m *TestRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRes.Merge(m, src)
}
func (m *TestRes) XXX_Size() int {
	return xxx_messageInfo_TestRes.Size(m)
}
func (m *TestRes) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRes.DiscardUnknown(m)
}

var xxx_messageInfo_TestRes proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TestReq)(nil), "test_rpc.testReq")
	proto.RegisterType((*TestRes)(nil), "test_rpc.testRes")
}

func init() { proto.RegisterFile("test_rpc.proto", fileDescriptor_92f2f84cc4a19190) }

var fileDescriptor_92f2f84cc4a19190 = []byte{
	// 86 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x49, 0x2d, 0x2e,
	0x89, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x38,
	0xb9, 0xd8, 0x41, 0xec, 0xa0, 0xd4, 0x42, 0x04, 0xb3, 0xd8, 0xc8, 0x1a, 0xca, 0x2c, 0x48, 0x16,
	0x32, 0xe0, 0x02, 0x2b, 0x0e, 0x49, 0x2d, 0x2e, 0x11, 0x12, 0xd4, 0x83, 0x9b, 0x03, 0xd5, 0x24,
	0x85, 0x21, 0x54, 0x9c, 0xc4, 0x06, 0xb6, 0xc3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xff, 0x88,
	0x8f, 0x78, 0x75, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestRpcClient is the client API for TestRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestRpcClient interface {
	TestTest(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestRes, error)
}

type testRpcClient struct {
	cc *grpc.ClientConn
}

func NewTestRpcClient(cc *grpc.ClientConn) TestRpcClient {
	return &testRpcClient{cc}
}

func (c *testRpcClient) TestTest(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestRes, error) {
	out := new(TestRes)
	err := c.cc.Invoke(ctx, "/test_rpc.testRpc/testTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestRpcServer is the server API for TestRpc service.
type TestRpcServer interface {
	TestTest(context.Context, *TestReq) (*TestRes, error)
}

// UnimplementedTestRpcServer can be embedded to have forward compatible implementations.
type UnimplementedTestRpcServer struct {
}

func (*UnimplementedTestRpcServer) TestTest(ctx context.Context, req *TestReq) (*TestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestTest not implemented")
}

func RegisterTestRpcServer(s *grpc.Server, srv TestRpcServer) {
	s.RegisterService(&_TestRpc_serviceDesc, srv)
}

func _TestRpc_TestTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRpcServer).TestTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_rpc.testRpc/TestTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRpcServer).TestTest(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test_rpc.testRpc",
	HandlerType: (*TestRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "testTest",
			Handler:    _TestRpc_TestTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test_rpc.proto",
}
