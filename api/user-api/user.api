info(
    title: "user api"
    desc: "user api interface"
    author: "jiebin.hu"
    email: "458249864@qq.com"
    version: "1.0.0"
)

type HelloRequest struct{}

type JwtTokenRequest struct {
	UserId int64 `path:"userId"`
}

type JwtTokenResponse struct {
	AccessToken  string `json:"access_token"`
	AccessExpire int64  `json:"access_expire"`
	RefreshAfter int64  `json:"refresh_after"` // 建议客户端刷新token的绝对时间
}

type GetUserRequest struct {
	UserId string `json:"userId"`
}

type GetUserResponse struct {
	UserId         string `json:"userId"`
	AccessToken    string `json:"accessToken"`
	Avatar         string `json:"avatar"`
	CreateTimeUnix int64  `json:"createTimeUnix"`
}

type AddUserRequest struct {
	Avatar string `json:"avatar"`
}

type AddUserResponse struct {
	UserId         string `json:"user_id"`
	Avatar         string `json:"avatar"`
	AccessToken    string `json:"access_token"`
	CreateTimeUnix int64  `json:"create_time_unix"`
}

type GuestInitRequest struct {
	CommonParams
	AndroidId  string `form:"android_id,optional"`
	Imei       string `form:"imei,optional"`
	CampaignId string `form:"campaign_id,optional"`
}

type GuestLoginRequest struct {
	CommonParams
}

type CommonParams struct {
	UserId      int64  `form:"__user_id,optional"`
	GuestId     string `form:"__guest_id,optional"`
	Country     string `form:"__country,optional"`
	PkgName     string `form:"__pname,optional"`
	PkgChannel  string `form:"__pch,optional"`
	UserChannel string `form:"__uch,optional"`
	Platform    string `form:"__platform,optional"`
	Version     string `form:"__v,optional"`
}

type CommonResponse struct {
	Code    int         `json:"code"`
	Body    interface{} `json:"body,omitempty"`
	Message string      `json:"message,omitempty"`
}

type DispatcherRequest struct {
	CommonParams
	Id  string `form:"id"`
	Pkg string `path:"pkg"`
}

type AnchorRecommendRequest struct {
	CommonParams
	Page int64 `form:"page"`
	Size int64 `form:"size"`
}

type UserActionRequest struct {
	CommonParams
	UserAction string `form:"user_action"`
}

@server(
middleware : CheckAccessToken
)
service user-api {
    @handler JwtHandler
    post /userapi/user/token/:userId (JwtTokenRequest) returns (JwtTokenResponse)

    @handler DispatcherHandler
    get /userapi/:pkg/chat/dispatcher (DispatcherRequest) returns (CommonResponse)

    @handler AnchorRecommendHandler
    get /userapi/anchor/recommend (AnchorRecommendRequest) returns (CommonResponse)

    @handler UserActionHandler
    get /userapi/user/action (UserActionRequest) returns (CommonResponse)
}

service user-api {
    @handler GuestInitHandler
    get /userapi/guest/init (GuestInitRequest) returns (CommonResponse)

    @handler GuestLoginHandler
    post /userapi/guest/login (GuestLoginRequest) returns (CommonResponse)

    @handler HelloHandler
    get /userapi/hello (HelloRequest) returns (CommonResponse)
}

@server(
    jwt: JwtAuth
)
service user-api {
    @server(
        handler: GetUserHandler
    )
    post /userapi/user/info (GetUserRequest) returns (GetUserResponse)

    @server(
        handler : AddUserHandler
    )
    post /userapi/user/add (AddUserRequest) returns (AddUserResponse)
}

