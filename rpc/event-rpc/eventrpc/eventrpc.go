// Code generated by goctl. DO NOT EDIT!
// Source: event_rpc.proto

//go:generate mockgen -destination ./eventrpc_mock.go -package eventrpc -source $GOFILE

package eventrpc

import (
	"context"

	event_rpc "frozen-go-project/rpc/event-rpc/pb"

	"github.com/tal-tech/go-zero/core/jsonx"
	"github.com/tal-tech/go-zero/zrpc"
)

type (
	EventRpc interface {
		UserAction(ctx context.Context, in *UserActionReq) (*CommonResponse, error)
	}

	defaultEventRpc struct {
		cli zrpc.Client
	}
)

func NewEventRpc(cli zrpc.Client) EventRpc {
	return &defaultEventRpc{
		cli: cli,
	}
}

func (m *defaultEventRpc) UserAction(ctx context.Context, in *UserActionReq) (*CommonResponse, error) {
	var request event_rpc.UserActionReq
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := event_rpc.NewEventRpcClient(m.cli.Conn())
	resp, err := client.UserAction(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret CommonResponse
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}
