// Code generated by goctl. DO NOT EDIT!
// Source: user_rpc.proto

//go:generate mockgen -destination ./userrpc_mock.go -package userrpc -source $GOFILE

package userrpc

import (
	"context"

	user_rpc "frozen-go-project/rpc/user-rpc/pb"

	"github.com/tal-tech/go-zero/core/jsonx"
	"github.com/tal-tech/go-zero/zrpc"
)

type (
	UserRpc interface {
		GetUser(ctx context.Context, in *GetUserReq) (*GetUserRes, error)
		AddUser(ctx context.Context, in *AddUserReq) (*AddUserRes, error)
	}

	defaultUserRpc struct {
		cli zrpc.Client
	}
)

func NewUserRpc(cli zrpc.Client) UserRpc {
	return &defaultUserRpc{
		cli: cli,
	}
}

func (m *defaultUserRpc) GetUser(ctx context.Context, in *GetUserReq) (*GetUserRes, error) {
	var request user_rpc.GetUserReq
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := user_rpc.NewUserRpcClient(m.cli.Conn())
	resp, err := client.GetUser(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret GetUserRes
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultUserRpc) AddUser(ctx context.Context, in *AddUserReq) (*AddUserRes, error) {
	var request user_rpc.AddUserReq
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := user_rpc.NewUserRpcClient(m.cli.Conn())
	resp, err := client.AddUser(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret AddUserRes
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}
